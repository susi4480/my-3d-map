
# -*- coding: utf-8 -*-
"""
M0+Loft（スライス内パネル + 隣接スライス接続） OBJ出力版
- M0: 各スライスで航行可能長方形パネルを生成
- Loft: 隣り合うスライスで「中心＋サイズ」コスト最小マッチング→同順の4隅をロフトして接続四角面を生成
出力: OBJ（メッシュのみ。マテリアルなし）
"""

import os
import math
import numpy as np
import laspy
import cv2

# ===== 入出力 =====
INPUT_LAS  = r"/data/0731_suidoubasi_ue.las"
OUTPUT_OBJ = r"/output/0812_M0_with_loft.obj"
os.makedirs(os.path.dirname(OUTPUT_OBJ) or ".", exist_ok=True)

# ===== パラメータ（中心線・断面）=====
UKC = -1.0                  # [m] 左右岸抽出に使う水面下閾値（中心線用）
BIN_X = 2.0                 # [m] 中心線作成時の X ビン幅
MIN_PTS_PER_XBIN = 50       # 各 X ビンに必要な最小点数
GAP_DIST = 50.0             # [m] 中心線候補の間引き距離
SECTION_INTERVAL = 0.5      # [m] 断面（中心線内挿）間隔
LINE_LENGTH = 60.0          # [m] 法線方向の全長（±半分使う）
SLICE_THICKNESS = 0.20      # [m] 接線方向の薄さ（u=±厚/2）
MIN_PTS_PER_SLICE = 80      # [点] 各帯の最低点数

# ===== 航行可能空間に使う高さ制限 =====
Z_MAX_FOR_NAV = 1.9         # [m] この高さ以下の点だけで航行空間を判定

# ===== v–z 断面のoccupancy =====
GRID_RES = 0.10             # [m/セル] v,z 解像度
MORPH_RADIUS = 23           # [セル] クロージング構造要素半径
USE_ANCHOR_DOWNFILL = True  # 水面高さ近傍で down-fill を有効化
ANCHOR_Z = 1.50             # [m] アンカー高さ（補間後の占有で判定）
ANCHOR_TOL = 0.50           # [m] 近傍幅（±）
MIN_RECT_SIZE = 5           # [セル] 長方形の最小 高さ/幅（両方以上）

# ===== スライス間マッチ & ロフト =====
MATCH_CENTER_WEIGHT = 1.0   # コスト: 中心距離（m）
MATCH_SIZE_WEIGHT   = 0.5   # コスト: |幅差|+|高さ差|（m）に掛ける重み
MATCH_MAX_COST      = 1.5   # 許容最大コスト（これを超えるペアは破棄）

# ===== 便利関数 =====
def l2(p, q):
    return math.hypot(q[0]-p[0], q[1]-p[1])

def order_corners_ccw(corners_vz, center_vz):
    c = np.asarray(center_vz)
    rel = np.asarray(corners_vz) - c
    ang = np.arctan2(rel[:,1], rel[:,0])
    idx = np.argsort(ang)
    return [corners_vz[i] for i in idx]

def write_obj_mesh(path, vertices, faces):
    with open(path, "w", encoding="utf-8") as f:
        f.write("# OBJ generated by M0+Loft exporter\n")
        for v in vertices:
            f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
        for face in faces:
            f.write("f " + " ".join(str(i) for i in face) + "\n")
    print(f"✅ OBJ出力: {path}  V={len(vertices)}  F={len(faces)}")

def find_max_rectangle(bitmap_bool: np.ndarray):
    """True=自由 の2D配列（行=Z, 列=V）から最大内接長方形(top, left, h, w)"""
    h, w = bitmap_bool.shape
    height = [0]*w
    best = (0, 0, 0, 0); max_area = 0
    for i in range(h):
        for j in range(w):
            height[j] = height[j] + 1 if bitmap_bool[i, j] else 0
        stack = []; j = 0
        while j <= w:
            cur = height[j] if j < w else 0
            if not stack or cur >= height[stack[-1]]:
                stack.append(j); j += 1
            else:
                top_idx = stack.pop()
                width = j if not stack else j - stack[-1] - 1
                area  = height[top_idx]*width
                if area > max_area:
                    max_area = area
                    top  = i - height[top_idx] + 1
                    left = (stack[-1] + 1) if stack else 0
                    best = (top, left, height[top_idx], width)
    return best

def downfill_on_closed(closed_uint8, z_min, grid_res, anchor_z, tol):
    """補間後の占有に対して、アンカー帯にヒットする列を下に埋める"""
    closed_bool = (closed_uint8 > 0)
    gh, gw = closed_bool.shape
    i_anchor = int(round((anchor_z - z_min) / grid_res))
    pad = max(0, int(np.ceil(tol / grid_res)))
    i_lo = max(0, i_anchor - pad)
    i_hi = min(gh - 1, i_anchor + pad)
    if i_lo > gh - 1 or i_hi < 0:
        return (closed_bool.astype(np.uint8) * 255)
    out = closed_bool.copy()
    for j in range(gw):
        col = closed_bool[:, j]
        if not np.any(col): continue
        if np.any(col[i_lo:i_hi+1]):
            imax = np.max(np.where(col)[0])
            out[:imax+1, j] = True
    return (out.astype(np.uint8) * 255)

def rectangles_on_slice(points_vz, grid_res, morph_radius, use_anchor, anchor_z, anchor_tol,
                        min_rect_size):
    """スライス内の航行可能長方形モデル群を返す"""
    rect_models = []
    if len(points_vz) == 0:
        return rect_models

    v_min, v_max = points_vz[:,0].min(), points_vz[:,0].max()
    z_min, z_max = points_vz[:,1].min(), points_vz[:,1].max()
    gw = max(1, int(np.ceil((v_max - v_min) / grid_res)))
    gh = max(1, int(np.ceil((z_max - z_min) / grid_res)))
    grid_raw = np.zeros((gh, gw), dtype=np.uint8)

    yi = ((points_vz[:,0] - v_min) / grid_res).astype(int)
    zi = ((points_vz[:,1] - z_min) / grid_res).astype(int)
    ok = (yi >= 0) & (yi < gw) & (zi >= 0) & (zi < gh)
    grid_raw[zi[ok], yi[ok]] = 255

    # closing → anchor down-fill
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (2*morph_radius+1, 2*morph_radius+1))
    closed0 = cv2.morphologyEx(grid_raw, cv2.MORPH_CLOSE, kernel)
    closed  = downfill_on_closed(closed0, z_min, grid_res, anchor_z, anchor_tol) if use_anchor else closed0

    closed_bool = (closed > 0)
    free_bitmap = ~closed_bool  # True=自由

    # 上方チェック（補間後の占有）
    def has_points_above_after_interp(top, left, h, w):
        gh_, gw_ = closed_bool.shape
        z_above_start = top + h
        if z_above_start >= gh_: return False
        sub = closed_bool[z_above_start:gh_, left:left+w]
        return np.any(sub)

    free_work = free_bitmap.copy()
    while np.any(free_work):
        top, left, h, w = find_max_rectangle(free_work)
        if h < min_rect_size or w < min_rect_size:
            break
        if not has_points_above_after_interp(top, left, h, w):
            # v–z座標の四隅
            v0 = v_min + (left + 0.5) * grid_res
            z0 = z_min + (top  + 0.5) * grid_res
            W  = w * grid_res
            H  = h * grid_res
            corners = [
                [v0,   z0   ],
                [v0+W, z0   ],
                [v0+W, z0+H ],
                [v0,   z0+H ],
            ]
            center = [v0 + 0.5*W, z0 + 0.5*H]
            corners = order_corners_ccw(corners, center)
            rect_models.append({
                "center_vz": np.array(center, dtype=float),
                "size_vw":   np.array([W, H], dtype=float),
                "corners_vz": [np.array(c, dtype=float) for c in corners],
            })
        # 充填済み領域を除外
        free_work[top:top+h, left:left+w] = False

    return rect_models

def vz_to_world_on_slice(vz, c, n_hat):
    """(v,z) -> 世界座標 (x,y,z)  ※u=0（帯の中心線上）"""
    v, z = vz
    p_xy = c + v * n_hat
    return [p_xy[0], p_xy[1], z]

# ===== メイン =====
def main():
    las = laspy.read(INPUT_LAS)

    # ndarray化
    X = np.asarray(las.x, float)
    Y = np.asarray(las.y, float)
    Z = np.asarray(las.z, float)
    xy = np.column_stack([X, Y])

    # --- 中心線（UKCで左右岸→中点） ---
    x_min, x_max = xy[:,0].min(), xy[:,0].max()
    edges = np.arange(x_min, x_max + BIN_X, BIN_X)
    through = []
    for i in range(len(edges)-1):
        x0, x1 = edges[i], edges[i+1]
        m = (xy[:,0] >= x0) & (xy[:,0] < x1)
        if np.count_nonzero(m) < MIN_PTS_PER_XBIN:
            continue
        slab_xy = xy[m]; slab_z = Z[m]
        order = np.argsort(slab_xy[:,1])
        slab_xy = slab_xy[order]; slab_z = slab_z[order]
        under = slab_z <= UKC
        if not np.any(under): continue
        idx = np.where(under)[0]
        left  = slab_xy[idx[0]]
        right = slab_xy[idx[-1]]
        c = 0.5*(left + right)
        through.append(c)
    if len(through) < 2:
        raise RuntimeError("中心線が作れません。UKCやBIN_Xを調整してください。")
    through = np.asarray(through, float)

    # --- gap=50mで間引き ---
    thinned = [through[0]]
    for p in through[1:]:
        if l2(thinned[-1], p) >= GAP_DIST:
            thinned.append(p)
    through = np.asarray(thinned, float)

    # --- 中心線を内挿（断面中心列） ---
    centers = []
    for i in range(len(through)-1):
        p, q = through[i], through[i+1]
        d = l2(p, q)
        if d < 1e-9: continue
        n_steps = int(d / SECTION_INTERVAL)
        for s_i in range(n_steps+1):
            s = min(s_i * SECTION_INTERVAL, d)
            t = s / d
            centers.append((1-t)*p + t*q)
    centers = np.asarray(centers, float)

    # --- スライス処理：各スライスの長方形モデルを保存 ---
    half_len = LINE_LENGTH * 0.5
    half_th  = SLICE_THICKNESS * 0.5
    slice_rects = []   # list[list[rect_model]]
    slice_frames = []  # list[(c, n_hat)]

    for i in range(len(centers)-1):
        c  = centers[i]
        cn = centers[i+1]
        t_vec = cn - c
        norm = np.linalg.norm(t_vec)
        if norm < 1e-9: 
            slice_rects.append([])
            slice_frames.append((c, np.array([1.0,0.0])))
            continue
        t_hat = t_vec / norm
        n_hat = np.array([-t_hat[1], t_hat[0]], dtype=float)

        dxy = xy - c
        u = dxy @ t_hat
        v = dxy @ n_hat
        m_band = (np.abs(u) <= half_th) & (np.abs(v) <= half_len)

        m_nav = m_band & (Z <= Z_MAX_FOR_NAV)
        if np.count_nonzero(m_nav) < MIN_PTS_PER_SLICE:
            slice_rects.append([])
            slice_frames.append((c, n_hat))
            continue

        points_vz = np.column_stack([v[m_nav], Z[m_nav]])
        rect_models = rectangles_on_slice(
            points_vz,
            grid_res=GRID_RES,
            morph_radius=MORPH_RADIUS,
            use_anchor=USE_ANCHOR_DOWNFILL,
            anchor_z=ANCHOR_Z,
            anchor_tol=ANCHOR_TOL,
            min_rect_size=MIN_RECT_SIZE
        )
        slice_rects.append(rect_models)
        slice_frames.append((c, n_hat))

    # ===== OBJ組み立て（スライス内パネル + スライス間ロフト） =====
    vertices = []
    faces = []

    def add_quad(v4_xyz):
        base = len(vertices) + 1
        vertices.extend(v4_xyz)
        faces.append([base, base+1, base+2, base+3])

    # 1) スライス内パネル（M0と同等）
    panel_count = 0
    for s, rects in enumerate(slice_rects):
        c, n_hat = slice_frames[s]
        for rect in rects:
            corners_vz = order_corners_ccw([p.copy() for p in rect["corners_vz"]], rect["center_vz"])
            corners_xyz = [vz_to_world_on_slice(vz, c, n_hat) for vz in corners_vz]
            add_quad(corners_xyz)
            panel_count += 1

    # 2) 隣接スライス間ロフト（中心＋サイズのコストで対応）
    loft_count = 0
    for i in range(len(slice_rects)-1):
        A = slice_rects[i]
        B = slice_rects[i+1]
        if not A or not B:
            continue
        (cA, nA) = slice_frames[i]
        (cB, nB) = slice_frames[i+1]

        # cost matrix（貪欲マッチ）
        costs = []
        for ia, ra in enumerate(A):
            for ib, rb in enumerate(B):
                dc = np.linalg.norm(ra["center_vz"] - rb["center_vz"])  # 中心距離
                ds = np.abs(ra["size_vw"] - rb["size_vw"]).sum()        # サイズ差
                cst = MATCH_CENTER_WEIGHT*dc + MATCH_SIZE_WEIGHT*ds
                costs.append((cst, ia, ib))
        costs.sort(key=lambda x: x[0])

        usedA=set(); usedB=set(); pairs=[]
        for cst, ia, ib in costs:
            if cst > MATCH_MAX_COST:
                break
            if ia in usedA or ib in usedB:
                continue
            usedA.add(ia); usedB.add(ib); pairs.append((ia, ib))

        # ペアごとに4隅ロフト（同順）→ 四角面4枚
        for ia, ib in pairs:
            Ra = A[ia]; Rb = B[ib]
            Ca = order_corners_ccw([c.copy() for c in Ra["corners_vz"]], Ra["center_vz"])
            Cb = order_corners_ccw([c.copy() for c in Rb["corners_vz"]], Rb["center_vz"])

            # 角の対応は同じインデックス
            # 隣接角を結んで“側面”を作る（4枚）
            for k in range(4):
                ka = k
                kb = (k + 1) % 4
                quad_vz = [Ca[ka], Ca[kb], Cb[kb], Cb[ka]]
                quad_xyz = [vz_to_world_on_slice(vz, cA, nA) for vz in quad_vz[:2]] + \
                           [vz_to_world_on_slice(vz, cB, nB) for vz in quad_vz[2:]]
                add_quad(quad_xyz)
                loft_count += 1

    if not faces:
        raise RuntimeError("出力する面がありません。パラメータを見直してください。")

    write_obj_mesh(OUTPUT_OBJ, vertices, faces)
    print("✅ 完了: M0+Loft OBJ")
    print(f"  スライス数: {len(centers)-1}")
    print(f"  スライス内パネル: {panel_count} 面")
    print(f"  スライス間ロフト側面: {loft_count} 面")
    print(f"  頂点数: {len(vertices)} / 面数: {len(faces)}")

if __name__ == "__main__":
    main()
